# This is what we expect:
# top:
#   Thing: value
#   nested:
#     doubly:
#       inner: value
# an_integer: 123
# a_string: abc
# a_bool: true

---

test_name: Test 'anything' token will match any response

includes:
  - !include common.yaml

stages:
  - name: match top level
    request:
      url: "{host}/fake_dictionary"
      method: GET
    response:
      status_code: 200
      body:
        top: !anything

---

test_name: Test bool type match

includes:
  - !include common.yaml

stages:
  - name: match explicitly
    request:
      url: "{host}/fake_dictionary"
      method: GET
    response:
      status_code: 200
      body:
        a_bool: true

  - name: match top level
    request:
      url: "{host}/fake_dictionary"
      method: GET
    response:
      status_code: 200
      body:
        a_bool: !anybool

---

test_name: Test nested dictionary access

includes:
  - !include common.yaml

stages:
  - name: match nested values
    request:
      url: "{host}/fake_dictionary"
      method: GET
    response:
      status_code: 200
      body:
        top:
          Thing: value
          nested:
            doubly:
              inner: value
        an_integer: 123
        a_string: abc

---

test_name: Match list item responses

includes:
  - !include common.yaml

stages:
  - name: Match generic types
    request:
      url: "{host}/fake_list"
      method: GET
    response:
      status_code: 200
      body:
        - a
        - b
        - !anystr
        - 1
        - 2
        - !anyint
        - -1.0
        - -2.0
        - !anyfloat

---

test_name: Match whole list 'anything'

includes:
  - !include common.yaml

stages:
  - name: Match with anything
    request:
      url: "{host}/nested_list"
      method: GET
    response:
      status_code: 200
      body:
        top: !anything

---

test_name: Match list items anything

includes:
  - !include common.yaml

stages:
  - name: Match with anything
    request:
      url: "{host}/nested_list"
      method: GET
    response:
      status_code: 200
      body:
        top:
          - a
          - !anystr
          - !anything

---

test_name: Test saving and converting types between stages

includes:
  - !include common.yaml

stages:
  - name: Convert and post a float, then save the echoed value
    request:
      url: "{host}/echo"
      method: POST
      json:
        value: !float "{v_int}"
    response:
      status_code: 200
      body:
        value: 123
      save:
        body:
          saved_float_value: value

  - name: Use saved value with type conversion
    request:
      url: "{host}/echo"
      method: POST
      json:
        original: "{saved_float_value}"
        converted: !int "{saved_float_value}"
    response:
      status_code: 200
      body:
        original: "123"
        converted: 123

  - name: Save and convert integer value
    request:
      url: "{host}/echo"
      method: POST
      json:
        int_value: !int "456"
    response:
      status_code: 200
      body:
        int_value: 456
      save:
        body:
          saved_int: int_value

  - name: Use saved int in next request
    request:
      url: "{host}/echo"
      method: POST
      json:
        doubled: !int "{saved_int}"
    response:
      status_code: 200
      body:
        doubled: 456

---

test_name: Test bool type conversion

includes:
  - !include common.yaml

stages:
  - name: Convert bool from a formatted string
    request:
      url: "{host}/expect_dtype"
      method: POST
      json:
        value: !bool "{v_bool}"
        dtype: bool
    response:
      status_code: 200

---

test_name: Match a number approximately
# Aligned with tavern-py commit 53690cf: Feature/approx numbers (#101)

includes:
  - !include common.yaml

stages:
  - name: Match pi approximately
    request:
      url: "{host}/pi"
      method: GET
    response:
      status_code: 200
      body:
        pi: !approx 3.1415926
