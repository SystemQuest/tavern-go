---
# Test 1: JWT token validation
test_name: Make sure jwt returned has the expected aud value

stages:
  - &login_request
    name: login
    request:
      url: http://localhost:5000/login
      json:
        user: test-user
        password: correct-password
      method: POST
    response:
      status_code: 200
      save:
        body:
          test_login_token: token

---
# Test 2: Complete CRUD workflow
test_name: Make sure server doubles number properly

stages:
  - name: reset database for test
    request:
      url: http://localhost:5000/reset
      method: POST
    response:
      status_code: 204

  - *login_request

  - name: post a number
    request:
      url: http://localhost:5000/numbers
      json:
        name: smallnumber
        number: 123
      method: POST
      headers:
        Authorization: "bearer {test_login_token}"
    response:
      status_code: 201

  - name: Make sure its in the db
    request:
      url: http://localhost:5000/numbers
      params:
        name: smallnumber
      method: GET
      headers:
        Authorization: "bearer {test_login_token}"
    response:
      status_code: 200
      body:
        number: 123

  - name: double it
    request:
      url: http://localhost:5000/double
      json:
        name: smallnumber
      method: POST
      headers:
        Authorization: "bearer {test_login_token}"
    response:
      status_code: 200
      body:
        number: 246

---
# Test 3: Error handling - nonexistent number
test_name: Test getting a number that doesn't exist

stages:
  - &reset_request
    name: reset database for test
    request:
      url: http://localhost:5000/reset
      method: POST
    response:
      status_code: 204

  - *login_request

  - name: check it doesn't exist yet
    request:
      url: http://localhost:5000/numbers
      params:
        name: whatnumber
      method: GET
      headers:
        Authorization: "bearer {test_login_token}"
    response:
      status_code: 404

---
# Test 4: Error handling - double nonexistent number  
test_name: Test doubling a number that doesn't exist

stages:
  - *reset_request

  - *login_request

  - name: Make sure doubling something that doesn't exist raises an error
    request:
      url: http://localhost:5000/double
      json:
        name: doesntexist
      method: POST
      headers:
        Authorization: "bearer {test_login_token}"
    response:
      status_code: 404

---
# Test 4: SSL certificate verification
test_name: Test SSL certificate verification with verify keyword

stages:
  # Test with verify explicitly set to true (default behavior)
  - name: Login with verify true
    request:
      url: http://localhost:5000/login
      method: POST
      verify: true
      json:
        user: test-user
        password: correct-password
    response:
      status_code: 200
      save:
        body:
          verify_test_token: token

  # Test with verify set to false (skip SSL verification)
  # Note: verify: false is useful in development/testing with self-signed certs
  # Never use in production!
  - name: Login with verify false
    request:
      url: http://localhost:5000/login
      method: POST
      verify: false
      json:
        user: test-user
        password: correct-password
    response:
      status_code: 200

